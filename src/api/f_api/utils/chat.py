from datetime import datetime
from typing import Any

from fastapi.responses import JSONResponse
from langchain_core.vectorstores import VectorStore
from langsmith import Client
from langsmith.utils import LangSmithError

from f_api.utils.embeddings import build_rag_chain


def chat_pipeline(
    vector_store: VectorStore,
    prompt: str,
) -> JSONResponse:
    rag_chain = build_rag_chain(vector_store)
    response = rag_chain.invoke({"input": prompt})
    # save_as_dataset(response)
    return JSONResponse(status_code=200, content={"message": response.get("answer")})

# def save_as_dataset(response: dict[str, Any]) -> None:
#     client = Client()
#     current_date = datetime.now().strftime("%Y-%m-%d")
#     project_name = "ragas-demo"
#     dataset_name = f"{project_name}-{current_date}"
#
#     try:
#         dataset = client.read_dataset(dataset_name=dataset_name)
#     except LangSmithError:
#         dataset = client.create_dataset(
#             dataset_name=dataset_name,
#             description="Question, Answers and Context generated by Chatbot.",
#         )
#
#     client.create_example(
#         inputs={"input": response.get("input")},
#         outputs={
#             "answer": response.get("answer"),
#             "context": response.get("context"),
#         },
#         dataset_id=dataset.id,
#     )
